REST
REPRESENTATIONAL STATE TRANSFER

STATUS
  INFORMAÇÃO 100 199
  SUCESSO 200 299
  REDIRECIONAMENTO 300 399
  ERRO CLIENTE  400 499
  ERRO SERVIDOR 500 599

SEMÂNTICA DO HTTP RFC 9110

*Idempotência = resultado não muda para ação repetida
-Inseguro - operação não somente read only

* GET         Obter recurso
  /users
  /users/mercio
  200 OK

*-PUT         Criar ou Substituir recurso completamente
  /users/mercio
  201 Created, 200 OK || 204 No Content
  415 Unsupported Media Type -> Content-Type

*-DELETE      Remover recurso
  /users/marcio
  204 No Content
  200 OK (com representação do eliminado)
  202 Accepted - (aceito, ainda não deletado)


 -POST        Criar recurso (publicar)
  /users/girolamo
  Content-Type:
  FORMS:
    application/x-www-form-urlencoded
    multipart/form-data
    text/plain
  Providing a block of data, such as the fields entered into an HTML form, to a data-handling process
  Posting a message to a bulletin board, newsgroup, mailing list, blog, or similar group of articles
  Creating a new resource that has yet to be identified by the origin server
  Appending data to a resource's existing representation(s).
  200 OK
  201 Created
  206 Partial Content
  204 No Content
  304 Not Modified
  303 See Other -> Location:
  416 Range Not Satisfiable

 -PATCH       Atualizar parcialmente recurso
  /users/mercio

  HEAD        Obter, Obter ... Obter recurso (Headers) sem Body
  /users

  OPTIONS     ?
  /?

 -CONNECT     ?
  /?

QUERY_STRINGS
  1. filtragem de resultados
  2. ordenação de resultados
  3. paginação de resultados
  4. parâmetros opcionais (como no terminal linux)

ROTAS
  1. identificação única por recurso

BODY
  1. dados sensíveis
  2. dados extensos
  3. o próprio HTML


I Client/Server

  Dai ao back o que é do back e dai ao front o que é do front.

  front-> interface, UX, requisições.
  back -> comunicação com o SGBD(rel|!rel), gerenciamento de cache, loging, respostas.

II Stateless - sem estado

  Requisições únicas e independentes e Devem ter toda a informação que o servidor
  precisa para atender à requisição advinda do cliente.

  O servidor não guarda nemhum estado do cliente.
  O cliente mantém suas informações de estado localmente:
  EX: sessões em um sistema

III Cacheable/cache

  Volume grande de requisições de mesma natureza, resultam
  em consumo de recursos físicos do servidor, como memória ,processamento, I/O
  nos discos rígidos. Para evitar a situação supracitada, se é necessário
  criar um cache capaz de guardar informações frequêntemente acessadas. Se antes
  o servidor fazia dez etapas para pegar a informação para cada cliente
  requisitador agora ele fará apenas uma: mandar a informação, ou partes dela, em
  cache.

  A solicitou um determinado recurso > cache
  B, C e D requisitam as mesmas coisas < cache

IIII Uniform interface/ interface uniforme

	Comunicação cliente e servidor.
	Regras para tornar a comunicação
	cliente e servidor
	mais genêrica possível.

	A.IDENTIFICANDO O RESOURCE

		Cada recurso/resource deve ter uma URI específica
		e coesa para poder ser acessado.

		HTTP/1.1 GET http://demo.com/user/demostration/perfil
		HTTP/1.1 GET http://demo.com/user/demostration/configuracao
		HTTP/1.1 POST http://demo.com/user/demostration/configuracao
		HTTP/1.1 GET http://demo.com/user/demostration/meusdados

	B.REPRESENTAÇÃO DO RESOURCE

		O formato como o recurso será devolvido ao cliente
		formatos: HTML, XML, JSON, TXT

		Exemplo de acordo com mostrado em A para JSON:
		|{
		|"name":"demostration",
		|"job":"Games/Animal'sGame",
		|"bobbies":["hideByke","selling","astronomy"]
		|}


	C.RESPOSTA AUTO-EXPLICATIVA

		Passagem de metadados na requisição e na resposta
		código HTTP da resposta, Host, Content-type, Agente usuário


		|GET /#!/users/demostration HTTP/1.1
		|User-Agent: Chrome/37.0.2062.94
		|Accept: application/json
		|Host: demo.com

	D.HYPERMEDIA

		Retornar todas informações necessárias na resposta para que o cliente
		saiba navegar e ter acesso a todos os recursos da aplicação.

		REQUEST
		HTTP/1.1 GET http://demo.com/user/demostration/posts

		RESPONSE
		{
		    "postagem": {
			"id": 42,
			"title": "Conceitos REST",
			"decription": "Um pouco sobre conceito da arquitetura REST",
			"_links": [
			    {
				"href": "/demostration/post/42",
				"method": "GET",
				"rel": "self"
			    },
			    {
				"href": "/demostration/post/42/comments",
				"method": "DELETE",
				"rel": "remove"
			    },
			    {
				"href": "/demostration/post/42/comments",
				"method": "GET",
				"rel": "comments"
			    },
			    {
				"href": "/demostration/posts/42/comments",
				"method": "POST",
				"rel": "new_comment"
			    },
			    {...}
			]
		    },
		    "_links": {
			"href": "/post",
			"method": "GET",
			"rel": "list"
		    }
		}


V Sistema em camadas/ Layered System

	A aplicação deve ser feita em camadas, e essas
	camadas deve ser fáceis de alterar, tanto para
	adicinar quanto para remover.

                                               /-----SERVIDOR C
                                              /-----SERVIDOR B
	INTERNET-----BALANCEADOR DE CARGA----------SERVIDOR A
                                               \------SERVIDOR E

VI Code-On-Demand(opcional)

	cliente executar código sob demanda, estender parte
	da lógica do servidor para o cliente. não faz parte
	da arquitetura, porém pode ser utilizado quando a
	execução for mais eficiente no client side.


